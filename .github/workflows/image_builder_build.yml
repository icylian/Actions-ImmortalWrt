name: ⚙ Build with Image Builder

on:
  workflow_dispatch:
    inputs:
      image_builder:
        description: 'ImmortalWrt Image Builder Link'
        type: string
        required: true
        default: 'https://downloads.immortalwrt.org/snapshots/targets/rockchip/armv8/immortalwrt-imagebuilder-rockchip-armv8.Linux-x86_64.tar.zst'
      profile:
        description: 'Build target'
        type: choice
        options:
          - friendlyarm_nanopi-r2c
          - friendlyarm_nanopi-r2c-plus
          - friendlyarm_nanopi-r2s
          - friendlyarm_nanopi-r4s
          - friendlyarm_nanopi-r4se
          - friendlyarm_nanopi-r5c
          - friendlyarm_nanopi-r5s
          - friendlyarm_nanopi-r6c
          - friendlyarm_nanopi-r6s

jobs:
  build:
    runs-on: ubuntu-latest
    name: ⚙ Build with Image Builder
    steps:
      - name: Get Time
        id: time
        uses: nanzm/get-time-action@master
        with:
          timeZone: Asia/Shanghai
          format: 'YYYYMMDD-HHmm'
    
      - name: Before freeing up disk space
        run: |
          echo "Before freeing up disk space"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="

      - name: "Optimize Disk Space"
        uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.1"
        with:
          operate_sudo: "True"
          general_include: ".+"
          general_exclude: |-
            ^GCC$
            ^G\+\+$
            Clang
            LLVM
          docker_include: ".+"
          docker_prune: "True"
          docker_clean: "True"
          apt_prune: "True"
          apt_clean: "True"
          homebrew_prune: "True"
          homebrew_clean: "True"
          npm_prune: "True"
          npm_clean: "True"
          os_swap: "True"

      - name: Freeing up disk space
        uses: easimon/maximize-build-space@master
        with: 
          root-reserve-mb: 2048
          swap-size-mb: 1
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: Free up disk space complete
        run: |
          echo "Free up disk space complete"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="

      - name: Install the software packages required for compilation
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
            g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
            libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5 \
            libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lld llvm lrzsz mkisofs msmtp \
            nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip python3-ply \
            python3-docutils python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig \
            texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd xsltproc python3-distutils
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo rm -rf /etc/apt/sources.list.d/* /usr/local/lib/android /opt/ghc /usr/share/dotnet /usr/local/graalvm /usr/local/.ghcup \
          /usr/local/share/powershell /usr/local/share/chromium /usr/local/lib/node_modules

      - name: Download image builder
        run: |
          wget ${{inputs.image_builder}} -O imagebuilder.tar.zst
          tar -I zstd -xvf *.tar.zst

      - name: Update configs
        working-directory: immortalwrt-imagebuilder-rockchip-armv8.Linux-x86_64
        run: |
          sed -i 's/CONFIG_TARGET_ROOTFS_PARTSIZE=300/CONFIG_TARGET_ROOTFS_PARTSIZE=1024/' .config
          sed -i 's/CONFIG_TARGET_PREINIT_IP="192.168.1.1"/CONFIG_TARGET_PREINIT_IP="192.168.11.1"/' .config
          sed -i 's/CONFIG_TARGET_PREINIT_BROADCAST="192.168.1.255"/CONFIG_TARGET_PREINIT_BROADCAST="192.168.11.255"/' .config
      
      - name: Add third-part packages
        working-directory: immortalwrt-imagebuilder-rockchip-armv8.Linux-x86_64
        run: |
          wget https://github.com/morytyann/OpenWrt-mihomo/releases/latest/download/mihomo_aarch64_generic.tar.gz
          tar -zxvf mihomo_aarch64_generic.tar.gz -C ./packages
          rm mihomo_aarch64_generic.tar.gz
          curl -s https://api.github.com/repos/sbwml/luci-app-mosdns/releases/latest | grep -wo "https.*luci-app-mosdns_.*_all.ipk" | wget -P ./packages -qi -
          curl -s https://api.github.com/repos/sbwml/luci-app-mosdns/releases/latest | grep -wo "https.*luci-i18n-mosdns-zh-cn.*all.ipk" | wget -P ./packages -qi -
          curl -s https://api.github.com/repos/sbwml/luci-app-mosdns/releases/latest | grep -wo "https.*mosdns_.*_aarch64_generic.ipk" | wget -P ./packages -qi -
          curl -s https://api.github.com/repos/sbwml/luci-app-mosdns/releases/latest | grep -wo "https.*v2dat_.*_aarch64_generic.ipk" | wget -P ./packages -qi -
          curl -s https://api.github.com/repos/sbwml/luci-app-mosdns/releases/latest | grep -wo "https.*v2ray-geoip_.*_all.ipk" | wget -P ./packages -qi -
          curl -s https://api.github.com/repos/sbwml/luci-app-mosdns/releases/latest | grep -wo "https.*v2ray-geosite_.*_all.ipk" | wget -P ./packages -qi -

      - name: Compile
        working-directory: immortalwrt-imagebuilder-rockchip-armv8.Linux-x86_64
        run: |
            make image \
              PROFILE="${{inputs.profile}}" \
              PACKAGES="base-files block-mount busybox ca-bundle ca-certificates dnsmasq-full dropbear \
                firewall4 fstools fwtool getrandom jsonfilter libatomic libc libgcc libpthread librt \
                libstdcpp logd mtd netifd openwrt-keyring opkg procd procd-seccomp procd-ujail rpcd \
                rpcd-mod-file rpcd-mod-iwinfo rpcd-mod-ucode ubox ubus ubusd uci urandom-seed urngd usign \
                autocore automount cpufreq ipv6helper \
                libiwinfo-data kmod-scsi-core kmod-crypto-acompress kmod-crypto-aead kmod-crypto-arc4 \
                kmod-crypto-blake2b kmod-crypto-crc32c kmod-crypto-ecb kmod-crypto-hash kmod-crypto-hmac \
                kmod-crypto-manager kmod-crypto-null kmod-crypto-rng kmod-crypto-sha1 kmod-crypto-sha3 \
                kmod-crypto-sha512 kmod-crypto-user kmod-crypto-xxhash kmod-fs-btrfs kmod-fs-exfat kmod-fs-ext4 \
                kmod-fs-ntfs3 kmod-fs-vfat kmod-gpio-button-hotplug kmod-lib-crc-ccitt kmod-lib-crc16 kmod-lib-crc32c \
                kmod-lib-lzo kmod-lib-raid6 kmod-lib-xor kmod-lib-xxhash kmod-lib-zlib-deflate kmod-lib-zlib-inflate \
                kmod-lib-zstd kmod-nls-base kmod-nls-cp437 kmod-nls-iso8859-1 kmod-nls-utf8 kmod-br-netfilter \
                kmod-ip6tables kmod-ipt-conntrack kmod-ipt-core kmod-ipt-extra kmod-ipt-nat kmod-ipt-nat6 \
                kmod-ipt-physdev kmod-nf-conntrack kmod-nf-conntrack-netlink kmod-nf-conntrack6 kmod-nf-flow \
                kmod-nf-ipt kmod-nf-ipt6 kmod-nf-ipvs kmod-nf-log kmod-nf-log6 kmod-nf-nat kmod-nf-nat6 kmod-nf-reject \
                kmod-nf-reject6 kmod-nf-tproxy kmod-nfnetlink kmod-nft-compat kmod-nft-core kmod-nft-fib \
                kmod-nft-fullcone kmod-nft-nat kmod-nft-offload kmod-nft-tproxy kmod-dummy kmod-libphy \
                kmod-macvlan kmod-r8125 kmod-iptunnel kmod-iptunnel4 kmod-ppp kmod-mppe kmod-pppoe kmod-pppox \
                kmod-sit kmod-slhc kmod-tun kmod-veth kmod-usb-core kmod-usb-storage kmod-usb-storage-extras \
                kmod-usb-storage-uas lua ucode ucode-mod-fs ucode-mod-math ucode-mod-ubus ucode-mod-uci libsqlite3 \
                libattr libiptext libiptext-nft libiptext6 libxtables libQt6Core libQt6Network libQt6Sql libQt6Xml \
                qt6-plugin-libqopensslbackend qt6-plugin-libqsqlite libopenssl boost boost-system jansson libblkid \
                libblobmsg-json libbpf libcap libcomerr libcurl libdouble-conversion libe2p libelf libext2fs libf2fs \
                libfdisk libgmp libiwinfo libjson-c liblua liblucihttp liblucihttp-lua liblucihttp-ucode liblzo \
                libminiupnpc libmnl libmount libnatpmp libncurses libnetfilter-conntrack libnettle libnfnetlink \
                libnftnl libnghttp2 libnl-tiny libparted libpcre2-16 libreadline libseccomp libsmartcols libss \
                libtorrent-rasterbar libubox libubus libubus-lua libuci libuclient libucode libudebug libustream-openssl \
                libuuid libuv libwebsockets-full rpcd-mod-luci rpcd-mod-rrdns terminfo zlib luci luci-lib-docker \
                luci-light luci-base luci-compat luci-lua-runtime luci-mod-admin-full luci-mod-network luci-mod-status \
                luci-mod-system luci-app-cpufreq luci-app-diskman \
                luci-app-dockerman luci-app-firewall luci-app-mihomo luci-app-mosdns luci-app-opkg luci-app-qbittorrent \
                luci-app-syncthing \
                luci-app-zerotier luci-theme-argon luci-theme-bootstrap luci-proto-ipv6 luci-proto-ppp \
                luci-lib-base luci-lib-ip luci-lib-jsonc luci-lib-nixio default-settings \
                default-settings-chn luci-i18n-base-zh-cn luci-i18n-cpufreq-zh-cn luci-i18n-diskman-zh-cn \
                luci-i18n-dockerman-zh-cn luci-i18n-firewall-zh-cn luci-i18n-mihomo-zh-cn luci-i18n-mosdns-zh-cn \
                luci-i18n-opkg-zh-cn luci-i18n-qbittorrent-zh-cn luci-i18n-syncthing-zh-cn luci-i18n-zerotier-zh-cn \
                qbittorrent-enhanced-edition curl ip6tables-nft iptables-mod-extra iptables-nft nftables-json xtables-nft \
                mosdns v2ray-geoip v2ray-geosite ip-full zerotier cgi-io uhttpd uhttpd-mod-ubus \
                6in4 krb5-libs mihomo odhcp6c odhcpd-ipv6only ppp ppp-mod-pppoe uclient-fetch uboot-envtools blkid \
                fdisk lsblk parted partx-utils btrfs-progs e2fsprogs mkf2fs ntfs3-mount ttyd cgroupfs-mount containerd \
                docker dockerd jshn libjson-script mount-utils runc shellsync smartmontools syncthing tini ucode-mod-html \
                ucode-mod-lua v2dat yq"
      
      - uses: ncipollo/release-action@v1
        with:
          tag: "${{ steps.time.outputs.time }}"
          name: "NanoPi | ImmortalWrt"
          artifacts: "immortalwrt-imagebuilder-rockchip-armv8.Linux-x86_64/bin/targets/rockchip/armv8/*.gz"
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          makeLatest: true
          token: "${{ secrets.GITHUB_TOKEN }}"
          body: |
            ⚠The firmware listed below is not tested by default. Please be prepared for date backup and version rollback.
            Custom ImmortalWrt build from source code for NanoPi RXS with:

            - Admin: root@192.168.11.1
            - Sources: ${{ inputs.image_builder }}
            - Extensions: 
              Luci WebUI, Docker, QBEE, Syncthing, Zerotier, Mosdns and Mihomo.
